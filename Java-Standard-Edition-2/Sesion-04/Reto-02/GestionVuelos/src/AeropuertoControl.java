import java.util.concurrent.*;
import java.util.Random;

public class AeropuertoControl {
    private static final Random random = new Random();

    // Probabilidades de √©xito para cada verificaci√≥n
    private static final double PROBABILIDAD_PISTA = 0.80;
    private static final double PROBABILIDAD_CLIMA = 0.85;
    private static final double PROBABILIDAD_TRAFICO = 0.90;
    private static final double PROBABILIDAD_PERSONAL = 0.95;

    public CompletableFuture<Boolean> verificarPista() {
        return CompletableFuture.supplyAsync(() -> {
            System.out.println("üõ£Ô∏è Verificando disponibilidad de pista...");
            try {
                Thread.sleep(2000 + random.nextInt(1000)); // Latencia 2-3 segundos

                // Simular fallo aleatorio (20% de fallo)
                if (random.nextDouble() > PROBABILIDAD_PISTA) {
                    System.out.println("‚ö†Ô∏è Pista en mantenimiento!");
                    return false;
                }
                return true;
            } catch (InterruptedException e) {
                throw new RuntimeException("Verificaci√≥n de pista interrumpida");
            }
        });
    }

    public CompletableFuture<Boolean> verificarClima() {
        return CompletableFuture.supplyAsync(() -> {
            System.out.println("üå¶Ô∏è Verificando condiciones clim√°ticas...");
            try {
                Thread.sleep(2000 + random.nextInt(1000)); // Latencia 2-3 segundos

                // Simular fallo aleatorio (15% de fallo)
                if (random.nextDouble() > PROBABILIDAD_CLIMA) {
                    System.out.println("‚ö†Ô∏è Tormenta detectada!");
                    return false;
                }
                return true;
            } catch (InterruptedException e) {
                throw new RuntimeException("Verificaci√≥n de clima interrumpida");
            }
        });
    }

    public CompletableFuture<Boolean> verificarTraficoAereo() {
        return CompletableFuture.supplyAsync(() -> {
            System.out.println("üö¶ Verificando tr√°fico a√©reo...");
            try {
                Thread.sleep(2000 + random.nextInt(1000)); // Latencia 2-3 segundos

                // Simular fallo aleatorio (10% de fallo)
                if (random.nextDouble() > PROBABILIDAD_TRAFICO) {
                    System.out.println("‚ö†Ô∏è Tr√°fico a√©reo congestionado!");
                    return false;
                }
                return true;
            } catch (InterruptedException e) {
                throw new RuntimeException("Verificaci√≥n de tr√°fico interrumpida");
            }
        });
    }

    public CompletableFuture<Boolean> verificarPersonalTierra() {
        return CompletableFuture.supplyAsync(() -> {
            System.out.println("üë∑‚Äç‚ôÇÔ∏è Verificando personal en tierra...");
            try {
                Thread.sleep(2000 + random.nextInt(1000)); // Latencia 2-3 segundos

                // Simular fallo aleatorio (5% de fallo)
                if (random.nextDouble() > PROBABILIDAD_PERSONAL) {
                    System.out.println("‚ö†Ô∏è Personal insuficiente!");
                    return false;
                }
                return true;
            } catch (InterruptedException e) {
                throw new RuntimeException("Verificaci√≥n de personal interrumpida");
            }
        });
    }

    public void autorizarAterrizaje() {
        System.out.println("\nüõ´ Verificando condiciones para aterrizaje...\n");

        CompletableFuture<Boolean> pista = verificarPista();
        CompletableFuture<Boolean> clima = verificarClima();
        CompletableFuture<Boolean> trafico = verificarTraficoAereo();
        CompletableFuture<Boolean> personal = verificarPersonalTierra();

        // Combinar todos los resultados
        CompletableFuture<Void> todasVerificaciones = CompletableFuture.allOf(
                pista, clima, trafico, personal
        );

        todasVerificaciones.thenRun(() -> {
            try {
                // Obtener resultados individuales
                boolean pistaOk = pista.get();
                boolean climaOk = clima.get();
                boolean traficoOk = trafico.get();
                boolean personalOk = personal.get();

                System.out.println("\nüõ£Ô∏è Pista disponible: " + pistaOk);
                System.out.println("üå¶Ô∏è Clima favorable: " + climaOk);
                System.out.println("üö¶ Tr√°fico a√©reo despejado: " + traficoOk);
                System.out.println("üë∑‚Äç‚ôÇÔ∏è Personal disponible: " + personalOk);
                System.out.println();

                if (pistaOk && climaOk && traficoOk && personalOk) {
                    System.out.println("üõ¨ Aterrizaje autorizado: todas las condiciones √≥ptimas.");
                } else {
                    System.out.println("üö´ Aterrizaje denegado: condiciones no √≥ptimas.");
                }
            } catch (InterruptedException | ExecutionException e) {
                System.err.println("‚ö†Ô∏è Error en el proceso de autorizaci√≥n: " + e.getMessage());
                System.out.println("üö´ Aterrizaje denegado: error en las verificaciones.");
            }
        }).exceptionally(ex -> {
            System.err.println("‚ö†Ô∏è Error cr√≠tico: " + ex.getMessage());
            System.out.println("üö´ Aterrizaje denegado: sistema no disponible.");
            return null;
        });

        // Mantener la aplicaci√≥n corriendo
        try {
            Thread.sleep(5000);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }

    public static void main(String[] args) {
        AeropuertoControl control = new AeropuertoControl();
        control.autorizarAterrizaje();
    }
}